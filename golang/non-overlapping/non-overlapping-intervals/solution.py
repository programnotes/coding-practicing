from sortedcontainers import SortedList

# 可以用线段树统计每个线段相交的线段数量，这样就能求出每条线段i之前有多少线段不交，记录为si，然后处理i+1线段时，
# 对于所有不与i+1相交的线段的求和，就是以i+1为结尾的方案数，最后把所有的方案加起来就成了。
# 作者：adanzl
# 链接：https: // leetcode.cn/circle/discuss/YJ3bL9/view/5sy86m/
# 来源：力扣（LeetCode）
# 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
#
# from sortedcontainers import SortedList
# inters = sorted(set(zip(starting, ending)))
# left, right = SortedList(), SortedList([b for b, e in inters])
# res = 0
# for b, e in inters:
# right.remove(b)
# l, r = left.bisect_left(b), len(right)-right.bisect_right(e)
# res += l*r
# left.add(e)
# print(res)
# 输入：
# starting = [1, 2, 4, 3, 7]
# ending = [3, 4, 6, 5, 8]
# 结果：1
# 输入：
# starting = [5, 2, 3, 7]
# ending = [7, 2, 4, 8]
# 结果 ：2
# 思路，去重所有区间，按左端点排序。
# 依次读入每个区间，计算左端点大于左边所有右端点的个数，计算右端点小于右边所有左端点的个数。
# 两者相乘即是该区间作出的贡献，累加得到结果。
# 作者：蒺藜
# 链接：https: // leetcode.cn/circle/discuss/YJ3bL9/view/lpz7Vt/
# 来源：力扣（LeetCode）
# 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。


def getThreeNonOverlappingIntervals(starting, ending):
    inters = sorted(set(zip(starting, ending)))
    # ([1,3],[2,4]) => left=SortedList([]),right=([1,2])
    left, right = SortedList(), SortedList([b for b, e in inters])
    res = 0
    for b, e in inters:
        right.remove(b)
        l, r = left.bisect_left(b), len(right)-right.bisect_right(e)
        res += l*r
        left.add(e)
    print(res)
    return res


qTestCases = [
    {
        "starting": [5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7, 5, 2, 2, 3, 7, 7, 7],
        "ending":   [7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8, 7, 2, 2, 4, 8, 8, 8],
        "expected": 2,
    },
    {
        "starting": [1, 2, 4, 3, 7],
        "ending":   [3, 4, 6, 5, 8],
        "expected": 1,
    },
    {
        "starting": [5, 2, 3, 7],
        "ending":   [7, 2, 4, 8],
        "expected": 2,
    },
    {
        "starting": [5, 2, 2, 3, 7, 7, 7],
        "ending":   [7, 2, 2, 4, 8, 8, 8],
        "expected": 2,
    },
]

for v in qTestCases:
    res = getThreeNonOverlappingIntervals(v["starting"], v["ending"])
    if res != v["expected"]:
        print("want:", v["expected"], "got:", res)
